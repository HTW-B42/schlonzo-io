openapi: 3.0.3

info:
  title: game-api
  description: the game-api
  version: 1.0.0

servers:
  - url: 'http://localhost:4711'

paths:
  /info:
    get:
      operationId: getApiInfo
      summary: get api info
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiInfo"

  /auth:
    post:
      operationId: performLogin
      summary: authenticate using user name and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicAuth"
      responses:
        '200':
          description: authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccess"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/Error"

  /user/name/test:
    post:
      operationId: testUsername
      summary: test if username is available
      parameters:
        - $ref: "#/components/parameters/UserName"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: boolean
        '500':
          $ref: "#/components/responses/Error"

  /user/Email/test:
    post:
      operationId: testEmail
      summary: test if email is available
      parameters:
        - $ref: "#/components/parameters/UserEmail"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: boolean
        '500':
          $ref: "#/components/responses/Error"

  /user/register:
    post:
      operationId: registerUser
      summary: register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        '200':
          description: user registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '500':
          $ref: "#/components/responses/Error"

  /user/logout:
    parameters:
      - $ref: "#/components/parameters/SessionToken"
    get:
      operationId: performLogout
      summary: logout
      responses:
        '200':
          description: logged out
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/Error"

  /game/start:
    parameters:
      - $ref: "#/components/parameters/SessionToken"
    get:
      operationId: startGame
      summary: starts a game and returns game lobby object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSession"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/Error"

  /game/question:
    parameters:
      - $ref: "#/components/parameters/SessionToken"
    get:
      operationId: getQuestion
      summary: get question
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/Error"

    post:
      operationId: answerQuestion
      summary: tell the server if the question was answered correctly
      parameters:
        - in: query
          name: user_answered_correctly
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSession"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '500':
          $ref: "#/components/responses/Error"

components:
  parameters:
    SessionToken:
      in: header
      name: X-SESSION-TOKEN
      required: true
      schema:
        $ref: "#/components/schemas/SessionToken"

    UserName:
      in: header
      name: X-USER-NAME
      required: true
      schema:
        $ref: "#/components/schemas/UserName"

    UserEmail:
      in: header
      name: X-USER-EMAIL
      required: true
      schema:
        $ref: "#/components/schemas/UserEmail"

  responses:
    Error:
      description: the default error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: account not found or invalid authentication data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: unauthorized, session token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    Error:
      type: object
      required:
        - error_msg
      properties:
        error_msg:
          type: string
          example: "unkown error"

    ApiInfo:
      type: object
      required:
        - info_msg
      properties:
        info_msg:
          type: string
          example: "info about me"

    ## AUTH ###
    SessionToken:
      type: string
      description: >
        session token unique to a users session, 
        invalidates with logout or specified time without activity
      example: "8763t4bc87zfgc2873rzu2873r6th2e8t2g982r73tzrhxs87u76trbg8765rg76"

    AuthSuccess:
      type: object
      description: object containing a session token and a user object
      required:
        - session_token
        - user
      properties:
        session_token:
          $ref: "#/components/schemas/SessionToken"
        user:
          $ref: "#/components/schemas/User"

    BasicAuth:
      type: object
      required:
        - auth_string
      properties:
        auth_string:
          description: base64 encoded string containing username:hashed_password
          type: string
          format: base64
          example: "UmVhbF9GcmllZHJpY2hfU2NobWVyejpnZWl6aXN0Z2VpbDY5"

    ### USER ###
    UserName:
      type: string
      description: the users login and user name
      pattern: '^(?=.{8,22}$)(?![_])(?!.*[_]{2})[a-zA-Z0-9_]+(?<![_])$'
      example: "Real_Friedrich_Schmerz"

    UserEmail:
      type: string
      description: the users email
      pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
      example: "test123@google.com"


    RegisterUser:
      type: object
      required:
        - user_name
        - user_email
        - hashed-password
      properties:
        user_name:
          description: the users login and user name
          type: string
          pattern: '^(?=.{8,22}$)(?![_])(?!.*[_]{2})[a-zA-Z0-9_]+(?<![_])$'
          example: "Real_Friedrich_Schmerz"
        user_email:
          description: the users email address
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          example: "RealFriedrichSchmerz@cdu.biz"
        hashed-password:
          description: hashed user password
          type: string
          format: base64

    User:
      type: object
      required:
        - user_name
        - user_email
        - user_confirmed
      properties:
        user_name:
          description: the users login and user name
          type: string
          pattern: '^(?=.{8,22}$)(?![_])(?!.*[_]{2})[a-zA-Z0-9_]+(?<![_])$'
          example: "Real_Friedrich_Schmerz"
        user_email:
          description: the users email address
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          example: "RealFriedrichSchmerz@cdu.biz"
        user_confirmed:
          description: has the user confirmed his email address?
          type: boolean
          example: false


    ### GAME ###
    GameSession:
      type: object
      description: a game session object, maybe the same as lobby?
      required:
        - gameID
        - gameOver
        - lobbyMembers
        - scoreboard
      properties:
        gameID:
          type: string
        lobbyMembers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        scoreboard:
          type: array
          items:
            $ref: "#/components/schemas/UserScore"
        gameOver:
          type: boolean

    UserScore:
      type: object
      description: a user score object
      required:
        - user_name
        - user_score
      properties:
        user_name:
          type: string
        user_score:
          type: number
          minimum: 0

    Question:
      type: object
      description: >
        object containing a question, 
        the answer choices as well as the correct answer
      required:
        - question
        - answerChoices
        - correctAnswer
      properties:
        question:
          type: string
        answerChoices:
          type: array
          items:
            type: string
        correctAnswer:
          type: string
