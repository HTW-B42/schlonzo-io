openapi: 3.0.3

info:
  title: game-api
  description: the game-api
  version: 1.0.0

servers:
  - url: 'http://localhost:4711/'

paths:
  /auth:
    post:
      summary: authenticate using user name and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicAuth"
      responses:
        '200':
          description: authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccess"
        '401':
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/name/test:
    post:
      summary: test if username is available
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserName"
      responses:
        '200':
          description: username available
        '444':
          description: username not available

  /user/register:
    post:
      summary: register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        '200':
          description: user registered
        '500':
          description: user could not be registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/logout:
    get:
      summary: logout
      responses:
        '200':
          description: logged out
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /game/start:
    get:
      summary: starts a game and returns game lobby object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSession"
        '401':
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /game/question:
    get:
      summary: get question
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        '401':
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: tell the server if the question was answered correctly
      parameters:
        - in: query
          name: user_answered_correctly
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameSession"
        '401':
          description: not authorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Error:
      type: object
      required:
        - error_msg
      properties:
        error_msg:
          type: string
          example: "unkown error"

    ## AUTH ###
    AuthSuccess:
      type: object
      description: object containing a session token and a user object
      required:
        - session_token
        - user
      properties:
        session_token:
          description: >
            session token unique to a users session, 
            invalidates with logout or specified time without activity
          type: string
          example: "8763t4bc87zfgc2873rzu2873r6th2e8t2g982r73tzrhxs87u76trbg8765rg76"
        user:
          $ref: "#/components/schemas/User"

    BasicAuth:
      type: object
      required:
        - auth_string
      properties:
        auth_string:
          description: base64 encoded string containing username:hashed_password
          type: string
          format: byte
          example: "bhgtuMGdut7ugr657rFDvc765r/5rgbhNzgFVRT+Fzs="

    ### USER ###
    BaseUser:
      type: object
      properties:
        user_name:
          description: the users login and user name
          type: string
          pattern: '^(?=.{8,22}$)(?![_])(?!.*[_]{2})[a-zA-Z0-9_]+(?<![_])$'
          example: "Real_Friedrich_Schmerz"
        user_email:
          description: the users email address
          type: string
          pattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
          format: email
          example: "RealFriedrichSchmerz@cdu.biz"

    UserName:
      type: object
      required:
        - user_name
      allOf:
        - $ref: "#/components/schemas/BaseUser"

    RegisterUser:
      type: object
      required:
        - user_name
        - user_email
        - hashed-password
      allOf:
        - $ref: "#/components/schemas/BaseUser"
      properties:
        hashed-password:
          description: hashed user password
          type: string
          format: byte

    User:
      type: object
      required:
        - user_name
        - user_email
        - user_id
        - user_confirmed
      allOf:
        - $ref: "#/components/schemas/BaseUser"
      properties:
        user_id:
          description: a unique id for the user
          type: string
          format: uuid
          example: "dfu90j39tj3497uiopoetrgu3984"
        user_confirmed:
          description: has the user confirmed his email address?
          type: boolean
          example: false

    GameSession:
      type: object
      description: a game session object, maybe the same as lobby?
      required:
        - gameID
        - gameOver
        - lobbyMembers
        - scoreboard
      properties:
        gameID:
          type: string
        lobbyMembers:
          type: array
          items:
            $ref: "#/components/schemas/User"
        scoreboard:
          type: array
          items:
            $ref: "#/components/schemas/UserScore"
        gameOver:
          type: boolean

    UserScore:
      type: object
      description: a user score object
      required:
        - user_id
        - user_score
      properties:
        user_id:
          type: string
          format: uuid
        user_score:
          type: number
          minimum: 0

    Question:
      type: object
      description: >
        object containing a question, 
        the answer choices as well as the correct answer
      required:
        - question
        - answerChoices
        - correctAnswer
      properties:
        question:
          type: string
        answerChoices:
          type: array
          items:
            type: string
            # TODO LETS TEST IT OUT
        correctAnswer:
          type: string
























#    UserUpdate:
#      description: contains any of the following updatable properties
#      allOf:
#        - $ref: "#/components/schemas/User"
#          type: object
#          properties:
#            UserName:
#              $ref: "#/components/schemas/UserName"
#            UserConfirmed:
#              $ref: "#/components/schemas/UserConfirmed"
#
#    UserScoreUpdate:
#      description: contains any of the following updatable properties
#      type: object
#      anyOf:
#        - $ref: "#/components/schemas/User"
#        - $ref: "#/components/schemas/UserUpdate"
#
#  securitySchemes:
#    session_token:
#      type: apiKey
#      description: session token to authorize requests.
#      name: SessionToken
#      $ref: "#/components/schemas/SessionToken"
#      in: query
#    basic_auth:
#      type: http
#      scheme: basic
#      description: Use `user` / `passwd` as the test credentials
#
#security:
#  - session_token: []
#  - OAuth2:
#      - read
#      - write4
